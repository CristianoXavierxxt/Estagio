------Seção 3: Exercicios Python I - 1/2------


------Exercicio 1:
nome = input("Digite seu nome");
idade = int(input("Digite sua idade"));

ano_atual = 2023;

ano_idade_100 = ano_atual + ( 100 - idade );

print(ano_idade_100);



------Exercicio 2:
def verificar_paridade(numero):
    if numero % 2 == 0:
        return "Par: {}".format(numero)
    else:
        return "Ímpar: {}".format(numero)

numero_array = [];

for i in range(3):
    numero = int(input("Digite o {}º".format(i+1)))
    numero_array.append(numero)

for i in range(len(numero_array)):
    resultado = verificar_paridade(numero_array[i]);
    print(resultado)




------Exercicio 3:
for i in range(21):
    if i % 2 == 0:
        print(i)




------Exercicio 4:
def eh_primo(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

for i in range(1, 101):
    if eh_primo(i):
        print(i)




------Exercicio 5:
dia = 22;
mes = 10;
ano = 2022;

print("{}/{}/{}".format(dia,mes,ano));










------Seção 4: Exercicios Python I - 2/2------


------Exercicio 6:
a = [1, 1, 2, 3, 5, 8, 14, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

set_a = set(a)
set_b = set(b)

intersecao = set_a & set_b

print(list(intersecao))



------Exercicio 7:
a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

numeros_impares = [numero for numero in a if numero % 2 != 0]

print(numeros_impares)



------Exercicio 8:
palavras = ['maça', 'arara', 'audio', 'radio', 'radar', 'moto']

for palavra in palavras:
    if palavra == palavra[::-1]:
        print("A palavra: {} é um palíndromo".format(palavra))
    else:
        print("A palavra: {} não é um palíndromo".format(palavra))



------Exercicio 9:
primeirosNomes = ['Joao', 'Douglas', 'Lucas', 'José']
sobreNomes = ['Soares', 'Souza', 'Silveira', 'Pedreira']
idades = [19, 28, 25, 31]

for indice, (primeiroNome, sobreNome, idade) in enumerate(zip(primeirosNomes, sobreNomes, idades)):
    print(f'{indice} - {primeiroNome} {sobreNome} está com {idade} anos')



------Exercicio 10:
def remover_duplicidade(lista):
    conjunto_sem_duplicatas = set(lista)
    
    lista_sem_duplicatas = list(conjunto_sem_duplicatas)
    
    return lista_sem_duplicatas

lista_teste = ['abc', 'abc', 'abc', '123', 'abc', '123', '123']

nova_lista = remover_duplicidade(lista_teste)

print(nova_lista)



------Exercicio 11:
nome_arquivo = 'arquivo_texto.txt'


with open(nome_arquivo, 'r') as arquivo:
    conteudo = arquivo.read()
    print(conteudo)




------Exercicio 12:
import json

nome_arquivo_json = 'person.json'


with open(nome_arquivo_json, 'r') as arquivo_json:

    dados_json = json.load(arquivo_json)

    print(dados_json) 




------Exercicio 13:
def my_map(list , f):
    return [f(num) for num in list]

lista_teste = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

nova_lista = my_map(lista_teste, lambda num: num ** 2);

print(nova_lista)



------Exercicio 14:
def imprimir_parametros(*args, **kwargs):

    for arg in args:
        print(arg)

    for key, value in kwargs.items():
        print(f"{value}")


imprimir_parametros(1, 3, 4, 'hello', parametro_nomeado='alguma coisa', x=20)



------Exercicio 15:
class Lampada:
    def __init__(self, ligada):
        self.ligada = ligada

    def liga(self):
        self.ligada = True

    def desliga(self):
        self.ligada = False

    def esta_ligada(self):
        return self.ligada

lampada = Lampada(True)

lampada.liga()

print("A lâmpada está ligada?", lampada.esta_ligada())

lampada.desliga()

print("A lâmpada ainda está ligada?", lampada.esta_ligada())



------Exercicio 16:
def somar_string(str_numeros):
    array_numeros = [int(num) for num in str_numeros.split(',')]

    return sum(array_numeros)


string_teste = "1,3,4,6,10,76"

resultado = somar_string(string_teste)

print(resultado)



------Exercicio 17:
def separar_lista(list):
    tamanho = len(list)
    tamanho_parte = tamanho // 3

    parte1 = list[:tamanho_parte]
    parte2 = list[ tamanho_parte: 2 * tamanho_parte]
    parte3 = list[ 2 * tamanho_parte: ]
    return parte1, parte2, parte3


lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

parte1, parte2, parte3 = separar_lista(lista)

print(parte1, parte2, parte3)



------Exercicio 18:
speed = {'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53, 'july':54, 'Aug':44, 'Sept':54}

valores_unicos = list(set(speed.values()))

print(valores_unicos)



------Exercicio 19:
import random

random_list = random.sample(range(500), 50)

tamanho = len(random_list)
lista_ordenada = sorted(random_list)


if(tamanho % 2 == 0):
    mediana = (lista_ordenada[tamanho // 2 - 1] + lista_ordenada[tamanho // 2]) / 2
else:
    mediana = lista_ordenada[tamanho // 2] 

media = sum(random_list) / tamanho

valor_minimo = min(random_list)
valor_maximo = max(random_list)

print("Media: {}, Mediana: {}, Mínimo: {}, Máximo: {}".format(media, mediana, valor_minimo, valor_maximo))



------Exercicio 20:
a = [1, 0, 2, 3, 5, 8, 13, 21, 34, 55, 89]

lista_invertida = a[::-1]

print(lista_invertida)







------Seção 6: Exercicios Python II - 1/2------


------Exercicio 21:
class Passaro:
    def voar(self):
        print("Voando...")

    def emitir_som(self):
        print("Emitindo som...")

class Pato(Passaro):
    def emitir_som(self):
        super().emitir_som()
        print("Quack Quack")

class Pardal(Passaro):
    def emitir_som(self):
        super().emitir_som()
        print("Piu Piu")

pato = Pato()
print("Pato")
pato.voar()
pato.emitir_som()


pardal = Pardal()
print("Pardal")
pardal.voar()
pardal.emitir_som()



------Exercicio 22:
class Pessoa:
    def __init__(self, identificador):
        self.__nome = None  
        self.id = identificador  

    @property
    def nome(self):
        return self.__nome

    @nome.setter
    def nome(self, novo_nome):
        self.__nome = novo_nome


pessoa = Pessoa(0)
pessoa.nome = 'Fulano De Tal'
print(pessoa.nome)



------Exercicio 23:
class Calculo:

    def somar( self, x, y ):
        return x + y
    
    def subtrair( self, x, y ):
        return x - y


calculo = Calculo()
x = 4 
y = 5

somando = calculo.somar(x, y)
subtraindo = calculo.subtrair(x, y)

print( "Somando: {} + {} = {}".format( x , y, somando ) )
print( "Subtraindo: {} - {} = {}".format( x, y, subtraindo ) )



------Exercicio 24:
class Ordenadora:
    def __init__(self, list):
        self.listaBaguncada = list

    def ordenacaoCrescente(self):
        self.listaBaguncada = sorted(self.listaBaguncada)
        return self.listaBaguncada

    def ordenacaoDecrescente(self):
        self.listaBaguncada = sorted( self.listaBaguncada, reverse=True )
        return self.listaBaguncada


lista_teste1 = [3,4,2,1,5]
crescente = Ordenadora(lista_teste1)
print(crescente.ordenacaoCrescente())

lista_teste2 = [9,7,6,8]
decrescente = Ordenadora(lista_teste2)
print(decrescente.ordenacaoDecrescente())



------Exercicio 25:
class Aviao:
    def __init__(self, modelo, velocidade_maxima, capacidade):
        self.modelo = modelo
        self.velocidade_maxima = velocidade_maxima
        self.cor = "Azul"
        self.capacidade = capacidade

aviao1 = Aviao(modelo="BOIENG456", velocidade_maxima="1500 km/h", capacidade="400 passageiros")
aviao2 = Aviao(modelo="Embraer Praetor 600", velocidade_maxima="863 km/h", capacidade="14 passageiros")
aviao3 = Aviao(modelo="Antonov An-2", velocidade_maxima="258 km/h", capacidade="12 passageiros")

lista_avioes = [aviao1, aviao2, aviao3]

for aviao in lista_avioes:
    print(f"O avião de modelo '{aviao.modelo}' possui uma velocidade máxima de '{aviao.velocidade_maxima}', capacidade para '{aviao.capacidade}' e é da cor '{aviao.cor}'.")
